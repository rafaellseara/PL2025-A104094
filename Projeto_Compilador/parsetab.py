
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "AND ARRAY BEGIN BOOLEAN DIV DO DOWNTO ELSE END FALSE FOR IF INTEGER LENGTH MOD NOT OF OR PROGRAM READ READLN STRING THEN TO TRUE VAR WHILE WRITE WRITELN argument assign dotdot greaterequal identifier lowerequal number\n    Pascal_Prog : PROGRAM identifier ';' Var_Declaration Code\n    \n    Var_Declaration :\n    \n    Var_Declaration : VAR Var_Lines\n    \n    Var_Lines : \n    \n    Var_Lines : Var_Lines Var_Line\n              | Var_Line\n    \n    Var_Line : Var_Names ':' Type ';'\n    \n    Type : INTEGER\n         | STRING\n         | BOOLEAN\n    \n    Type : ARRAY '[' number dotdot number ']' OF Type\n    \n    Var_Names : Var_Names ',' identifier\n    \n    Var_Names : identifier\n    \n    Code : BEGIN Lines_Of_Code END '.'\n    \n    Lines_Of_Code : \n    \n    Lines_Of_Code : Lines_Of_Code Program_Line\n    \n    Lines_Of_Code : Program_Line\n    \n    Program_Line : Write_Line ';'\n                 | Write_Line_No_ln ';'\n                 | Read_Line ';'\n                 | If_Statement ';'\n                 | Assignment ';'\n                 | Read_Line_ln ';'\n                 | Block ';'\n                 | For_Statement ';'\n                 | While_Statement ';'\n    \n    Program_Line_No_Semi_Colon : Write_Line\n                               | Write_Line_No_ln\n                               | Read_Line\n                               | If_Statement_Complete\n                               | If_Statement_Incomplete\n                               | Assignment\n                               | Read_Line_ln\n                               | Block\n                               | For_Statement\n                               | While_Statement\n    \n    Write_Line : WRITELN '(' Write_Args ')' \n    \n    Write_Line_No_ln : WRITE '(' Write_Args ')' \n    \n    Write_Args : Write_Args ',' Write_Arg\n    \n    Write_Args : Write_Arg\n    \n    Write_Arg : argument\n    \n    Write_Arg : identifier\n    \n    Read_Line : READ '(' identifier ')'\n    \n    Read_Line_ln : READLN '(' identifier ')'\n    \n    Read_Line : READLN '(' identifier '[' Expression ']' ')'\n    \n    Expression : Expression '+' Expression\n               | Expression '-' Expression\n               | Expression '*' Expression\n               | Expression '/' Expression\n               | Expression '>' Expression\n               | Expression '<' Expression\n               | Expression '=' Expression\n               | Expression lowerequal Expression\n               | Expression greaterequal Expression\n               | Expression DIV Expression\n               | Expression MOD Expression\n               | Expression AND Expression\n               | Expression OR Expression\n    Expression : '(' Expression ')'\n    Expression : identifier\n    \n    Expression : identifier '[' Expression ']'\n    \n    Expression : number\n    \n    Expression : argument\n    Expression : TRUEExpression : FALSEExpression : NOT Expression\n    Expression : LENGTH '(' identifier ')'\n    \n    Assignment : identifier assign Expression\n    \n    Block : BEGIN Lines_Of_Code END\n    \n    If_Statement : If_Statement_Complete\n                 | If_Statement_Incomplete\n    \n    If_Statement_Complete : IF Expression THEN Program_Line_No_Semi_Colon ELSE Program_Line_No_Semi_Colon\n    \n    If_Statement_Incomplete : IF Expression THEN Program_Line_No_Semi_Colon\n    \n    For_Statement : FOR identifier assign Expression TO Expression DO Program_Line_No_Semi_Colon\n                  | FOR identifier assign Expression DOWNTO Expression DO Program_Line_No_Semi_Colon\n    While_Statement : WHILE Expression DO Program_Line_No_Semi_Colon"
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,7,73,],[0,-1,-14,]),'identifier':([2,6,8,9,10,13,14,15,32,33,34,35,37,38,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,57,63,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,98,100,101,102,105,108,142,143,146,154,155,],[3,12,28,12,-6,28,28,-17,55,58,58,-5,71,28,-16,-18,-19,-20,-21,-22,-23,-24,-25,-26,77,77,79,58,81,58,58,58,28,58,58,58,58,58,58,58,58,58,58,58,58,58,58,137,28,-7,77,58,58,58,28,28,28,]),';':([3,16,17,18,19,20,21,22,23,24,30,31,58,59,60,61,62,66,67,68,69,72,80,99,104,106,107,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,138,144,145,151,153,157,158,160,],[4,41,42,43,44,45,46,47,48,49,-70,-71,-60,-62,-63,-64,-65,102,-8,-9,-10,-69,-68,-66,-37,-38,-43,-44,-76,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-73,-61,-67,-72,-45,-74,-75,-11,]),'BEGIN':([4,5,6,8,9,10,13,14,15,35,38,40,41,42,43,44,45,46,47,48,49,83,101,102,146,154,155,],[-2,8,-4,13,-3,-6,13,13,-17,-5,13,-16,-18,-19,-20,-21,-22,-23,-24,-25,-26,13,13,-7,13,13,13,]),'VAR':([4,],[6,]),'END':([8,13,14,15,38,40,41,42,43,44,45,46,47,48,49,],[-15,-15,39,-17,72,-16,-18,-19,-20,-21,-22,-23,-24,-25,-26,]),'WRITELN':([8,13,14,15,38,40,41,42,43,44,45,46,47,48,49,83,101,146,154,155,],[25,25,25,-17,25,-16,-18,-19,-20,-21,-22,-23,-24,-25,-26,25,25,25,25,25,]),'WRITE':([8,13,14,15,38,40,41,42,43,44,45,46,47,48,49,83,101,146,154,155,],[26,26,26,-17,26,-16,-18,-19,-20,-21,-22,-23,-24,-25,-26,26,26,26,26,26,]),'READ':([8,13,14,15,38,40,41,42,43,44,45,46,47,48,49,83,101,146,154,155,],[27,27,27,-17,27,-16,-18,-19,-20,-21,-22,-23,-24,-25,-26,27,27,27,27,27,]),'READLN':([8,13,14,15,38,40,41,42,43,44,45,46,47,48,49,83,101,146,154,155,],[29,29,29,-17,29,-16,-18,-19,-20,-21,-22,-23,-24,-25,-26,29,29,29,29,29,]),'FOR':([8,13,14,15,38,40,41,42,43,44,45,46,47,48,49,83,101,146,154,155,],[32,32,32,-17,32,-16,-18,-19,-20,-21,-22,-23,-24,-25,-26,32,32,32,32,32,]),'WHILE':([8,13,14,15,38,40,41,42,43,44,45,46,47,48,49,83,101,146,154,155,],[33,33,33,-17,33,-16,-18,-19,-20,-21,-22,-23,-24,-25,-26,33,33,33,33,33,]),'IF':([8,13,14,15,38,40,41,42,43,44,45,46,47,48,49,83,101,146,154,155,],[34,34,34,-17,34,-16,-18,-19,-20,-21,-22,-23,-24,-25,-26,34,34,34,34,34,]),':':([11,12,71,],[36,-13,-12,]),',':([11,12,71,74,75,76,77,78,140,],[37,-13,-12,105,-40,-41,-42,105,-39,]),'(':([25,26,27,29,33,34,53,57,63,64,82,84,85,86,87,88,89,90,91,92,93,94,95,96,98,108,142,143,],[50,51,52,54,57,57,57,57,57,100,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'assign':([28,55,],[53,82,]),'number':([33,34,53,57,63,82,84,85,86,87,88,89,90,91,92,93,94,95,96,98,103,108,142,143,147,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,139,59,59,59,152,]),'argument':([33,34,50,51,53,57,63,82,84,85,86,87,88,89,90,91,92,93,94,95,96,98,105,108,142,143,],[60,60,76,76,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,76,60,60,60,]),'TRUE':([33,34,53,57,63,82,84,85,86,87,88,89,90,91,92,93,94,95,96,98,108,142,143,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'FALSE':([33,34,53,57,63,82,84,85,86,87,88,89,90,91,92,93,94,95,96,98,108,142,143,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'NOT':([33,34,53,57,63,82,84,85,86,87,88,89,90,91,92,93,94,95,96,98,108,142,143,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'LENGTH':([33,34,53,57,63,82,84,85,86,87,88,89,90,91,92,93,94,95,96,98,108,142,143,],[64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,]),'INTEGER':([36,159,],[67,67,]),'STRING':([36,159,],[68,68,]),'BOOLEAN':([36,159,],[69,69,]),'ARRAY':([36,159,],[70,70,]),'.':([39,],[73,]),'DO':([56,58,59,60,61,62,99,122,123,124,125,126,127,128,129,130,131,132,133,134,135,144,145,149,150,],[83,-60,-62,-63,-64,-65,-66,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-61,-67,154,155,]),'+':([56,58,59,60,61,62,65,80,97,99,110,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,141,144,145,149,150,],[84,-60,-62,-63,-64,-65,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,-59,84,84,-61,-67,84,84,]),'-':([56,58,59,60,61,62,65,80,97,99,110,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,141,144,145,149,150,],[85,-60,-62,-63,-64,-65,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,-59,85,85,-61,-67,85,85,]),'*':([56,58,59,60,61,62,65,80,97,99,110,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,141,144,145,149,150,],[86,-60,-62,-63,-64,-65,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,-59,86,86,-61,-67,86,86,]),'/':([56,58,59,60,61,62,65,80,97,99,110,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,141,144,145,149,150,],[87,-60,-62,-63,-64,-65,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,-59,87,87,-61,-67,87,87,]),'>':([56,58,59,60,61,62,65,80,97,99,110,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,141,144,145,149,150,],[88,-60,-62,-63,-64,-65,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,-59,88,88,-61,-67,88,88,]),'<':([56,58,59,60,61,62,65,80,97,99,110,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,141,144,145,149,150,],[89,-60,-62,-63,-64,-65,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,-59,89,89,-61,-67,89,89,]),'=':([56,58,59,60,61,62,65,80,97,99,110,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,141,144,145,149,150,],[90,-60,-62,-63,-64,-65,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,-59,90,90,-61,-67,90,90,]),'lowerequal':([56,58,59,60,61,62,65,80,97,99,110,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,141,144,145,149,150,],[91,-60,-62,-63,-64,-65,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,-59,91,91,-61,-67,91,91,]),'greaterequal':([56,58,59,60,61,62,65,80,97,99,110,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,141,144,145,149,150,],[92,-60,-62,-63,-64,-65,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,-59,92,92,-61,-67,92,92,]),'DIV':([56,58,59,60,61,62,65,80,97,99,110,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,141,144,145,149,150,],[93,-60,-62,-63,-64,-65,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,-59,93,93,-61,-67,93,93,]),'MOD':([56,58,59,60,61,62,65,80,97,99,110,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,141,144,145,149,150,],[94,-60,-62,-63,-64,-65,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,-59,94,94,-61,-67,94,94,]),'AND':([56,58,59,60,61,62,65,80,97,99,110,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,141,144,145,149,150,],[95,-60,-62,-63,-64,-65,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,-59,95,95,-61,-67,95,95,]),'OR':([56,58,59,60,61,62,65,80,97,99,110,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,141,144,145,149,150,],[96,-60,-62,-63,-64,-65,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,-59,96,96,-61,-67,96,96,]),'THEN':([58,59,60,61,62,65,99,122,123,124,125,126,127,128,129,130,131,132,133,134,135,144,145,],[-60,-62,-63,-64,-65,101,-66,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-61,-67,]),'ELSE':([58,59,60,61,62,72,80,99,104,106,107,109,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,138,144,145,151,153,157,158,],[-60,-62,-63,-64,-65,-69,-68,-66,-37,-38,-43,-44,-76,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,146,-61,-67,-72,-45,-74,-75,]),')':([58,59,60,61,62,74,75,76,77,78,79,81,97,99,122,123,124,125,126,127,128,129,130,131,132,133,134,135,137,140,144,145,148,],[-60,-62,-63,-64,-65,104,-40,-41,-42,106,107,109,135,-66,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,145,-39,-61,-67,153,]),'TO':([58,59,60,61,62,99,110,122,123,124,125,126,127,128,129,130,131,132,133,134,135,144,145,],[-60,-62,-63,-64,-65,-66,142,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-61,-67,]),'DOWNTO':([58,59,60,61,62,99,110,122,123,124,125,126,127,128,129,130,131,132,133,134,135,144,145,],[-60,-62,-63,-64,-65,-66,143,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-61,-67,]),']':([58,59,60,61,62,99,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,141,144,145,152,],[-60,-62,-63,-64,-65,-66,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,144,148,-61,-67,156,]),'[':([58,70,81,],[98,103,108,]),'dotdot':([139,],[147,]),'OF':([156,],[159,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'Pascal_Prog':([0,],[1,]),'Var_Declaration':([4,],[5,]),'Code':([5,],[7,]),'Var_Lines':([6,],[9,]),'Var_Line':([6,9,],[10,35,]),'Var_Names':([6,9,],[11,11,]),'Lines_Of_Code':([8,13,],[14,38,]),'Program_Line':([8,13,14,38,],[15,15,40,40,]),'Write_Line':([8,13,14,38,83,101,146,154,155,],[16,16,16,16,112,112,112,112,112,]),'Write_Line_No_ln':([8,13,14,38,83,101,146,154,155,],[17,17,17,17,113,113,113,113,113,]),'Read_Line':([8,13,14,38,83,101,146,154,155,],[18,18,18,18,114,114,114,114,114,]),'If_Statement':([8,13,14,38,],[19,19,19,19,]),'Assignment':([8,13,14,38,83,101,146,154,155,],[20,20,20,20,117,117,117,117,117,]),'Read_Line_ln':([8,13,14,38,83,101,146,154,155,],[21,21,21,21,118,118,118,118,118,]),'Block':([8,13,14,38,83,101,146,154,155,],[22,22,22,22,119,119,119,119,119,]),'For_Statement':([8,13,14,38,83,101,146,154,155,],[23,23,23,23,120,120,120,120,120,]),'While_Statement':([8,13,14,38,83,101,146,154,155,],[24,24,24,24,121,121,121,121,121,]),'If_Statement_Complete':([8,13,14,38,83,101,146,154,155,],[30,30,30,30,115,115,115,115,115,]),'If_Statement_Incomplete':([8,13,14,38,83,101,146,154,155,],[31,31,31,31,116,116,116,116,116,]),'Expression':([33,34,53,57,63,82,84,85,86,87,88,89,90,91,92,93,94,95,96,98,108,142,143,],[56,65,80,97,99,110,122,123,124,125,126,127,128,129,130,131,132,133,134,136,141,149,150,]),'Type':([36,159,],[66,160,]),'Write_Args':([50,51,],[74,78,]),'Write_Arg':([50,51,105,],[75,75,140,]),'Program_Line_No_Semi_Colon':([83,101,146,154,155,],[111,138,151,157,158,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> Pascal_Prog","S'",1,None,None,None),
  ('Pascal_Prog -> PROGRAM identifier ; Var_Declaration Code','Pascal_Prog',5,'p_pascal_prog','syntax.py',6),
  ('Var_Declaration -> <empty>','Var_Declaration',0,'p_no_var_declaration','syntax.py',44),
  ('Var_Declaration -> VAR Var_Lines','Var_Declaration',2,'p_var_declaration','syntax.py',50),
  ('Var_Lines -> <empty>','Var_Lines',0,'p_var_lines_empty','syntax.py',56),
  ('Var_Lines -> Var_Lines Var_Line','Var_Lines',2,'p_var_lines','syntax.py',62),
  ('Var_Lines -> Var_Line','Var_Lines',1,'p_var_lines','syntax.py',63),
  ('Var_Line -> Var_Names : Type ;','Var_Line',4,'p_var_line','syntax.py',72),
  ('Type -> INTEGER','Type',1,'p_type','syntax.py',101),
  ('Type -> STRING','Type',1,'p_type','syntax.py',102),
  ('Type -> BOOLEAN','Type',1,'p_type','syntax.py',103),
  ('Type -> ARRAY [ number dotdot number ] OF Type','Type',8,'p_type_array','syntax.py',109),
  ('Var_Names -> Var_Names , identifier','Var_Names',3,'p_var_names','syntax.py',120),
  ('Var_Names -> identifier','Var_Names',1,'p_var_names_single','syntax.py',129),
  ('Code -> BEGIN Lines_Of_Code END .','Code',4,'p_code','syntax.py',137),
  ('Lines_Of_Code -> <empty>','Lines_Of_Code',0,'p_lines_of_code_empty','syntax.py',150),
  ('Lines_Of_Code -> Lines_Of_Code Program_Line','Lines_Of_Code',2,'p_lines_of_code','syntax.py',156),
  ('Lines_Of_Code -> Program_Line','Lines_Of_Code',1,'p_lines_of_code_single','syntax.py',162),
  ('Program_Line -> Write_Line ;','Program_Line',2,'p_program_line','syntax.py',168),
  ('Program_Line -> Write_Line_No_ln ;','Program_Line',2,'p_program_line','syntax.py',169),
  ('Program_Line -> Read_Line ;','Program_Line',2,'p_program_line','syntax.py',170),
  ('Program_Line -> If_Statement ;','Program_Line',2,'p_program_line','syntax.py',171),
  ('Program_Line -> Assignment ;','Program_Line',2,'p_program_line','syntax.py',172),
  ('Program_Line -> Read_Line_ln ;','Program_Line',2,'p_program_line','syntax.py',173),
  ('Program_Line -> Block ;','Program_Line',2,'p_program_line','syntax.py',174),
  ('Program_Line -> For_Statement ;','Program_Line',2,'p_program_line','syntax.py',175),
  ('Program_Line -> While_Statement ;','Program_Line',2,'p_program_line','syntax.py',176),
  ('Program_Line_No_Semi_Colon -> Write_Line','Program_Line_No_Semi_Colon',1,'p_program_line_no_semi_colon','syntax.py',182),
  ('Program_Line_No_Semi_Colon -> Write_Line_No_ln','Program_Line_No_Semi_Colon',1,'p_program_line_no_semi_colon','syntax.py',183),
  ('Program_Line_No_Semi_Colon -> Read_Line','Program_Line_No_Semi_Colon',1,'p_program_line_no_semi_colon','syntax.py',184),
  ('Program_Line_No_Semi_Colon -> If_Statement_Complete','Program_Line_No_Semi_Colon',1,'p_program_line_no_semi_colon','syntax.py',185),
  ('Program_Line_No_Semi_Colon -> If_Statement_Incomplete','Program_Line_No_Semi_Colon',1,'p_program_line_no_semi_colon','syntax.py',186),
  ('Program_Line_No_Semi_Colon -> Assignment','Program_Line_No_Semi_Colon',1,'p_program_line_no_semi_colon','syntax.py',187),
  ('Program_Line_No_Semi_Colon -> Read_Line_ln','Program_Line_No_Semi_Colon',1,'p_program_line_no_semi_colon','syntax.py',188),
  ('Program_Line_No_Semi_Colon -> Block','Program_Line_No_Semi_Colon',1,'p_program_line_no_semi_colon','syntax.py',189),
  ('Program_Line_No_Semi_Colon -> For_Statement','Program_Line_No_Semi_Colon',1,'p_program_line_no_semi_colon','syntax.py',190),
  ('Program_Line_No_Semi_Colon -> While_Statement','Program_Line_No_Semi_Colon',1,'p_program_line_no_semi_colon','syntax.py',191),
  ('Write_Line -> WRITELN ( Write_Args )','Write_Line',4,'p_write_line','syntax.py',220),
  ('Write_Line_No_ln -> WRITE ( Write_Args )','Write_Line_No_ln',4,'p_write_line_no_ln','syntax.py',226),
  ('Write_Args -> Write_Args , Write_Arg','Write_Args',3,'p_write_args_multiple','syntax.py',232),
  ('Write_Args -> Write_Arg','Write_Args',1,'p_write_args_single','syntax.py',238),
  ('Write_Arg -> argument','Write_Arg',1,'p_write_arg_argument','syntax.py',244),
  ('Write_Arg -> identifier','Write_Arg',1,'p_write_arg_identifier','syntax.py',250),
  ('Read_Line -> READ ( identifier )','Read_Line',4,'p_read_line','syntax.py',264),
  ('Read_Line_ln -> READLN ( identifier )','Read_Line_ln',4,'p_read_line_ln','syntax.py',284),
  ('Read_Line -> READLN ( identifier [ Expression ] )','Read_Line',7,'p_read_line_array','syntax.py',304),
  ('Expression -> Expression + Expression','Expression',3,'p_expression_binop','syntax.py',343),
  ('Expression -> Expression - Expression','Expression',3,'p_expression_binop','syntax.py',344),
  ('Expression -> Expression * Expression','Expression',3,'p_expression_binop','syntax.py',345),
  ('Expression -> Expression / Expression','Expression',3,'p_expression_binop','syntax.py',346),
  ('Expression -> Expression > Expression','Expression',3,'p_expression_binop','syntax.py',347),
  ('Expression -> Expression < Expression','Expression',3,'p_expression_binop','syntax.py',348),
  ('Expression -> Expression = Expression','Expression',3,'p_expression_binop','syntax.py',349),
  ('Expression -> Expression lowerequal Expression','Expression',3,'p_expression_binop','syntax.py',350),
  ('Expression -> Expression greaterequal Expression','Expression',3,'p_expression_binop','syntax.py',351),
  ('Expression -> Expression DIV Expression','Expression',3,'p_expression_binop','syntax.py',352),
  ('Expression -> Expression MOD Expression','Expression',3,'p_expression_binop','syntax.py',353),
  ('Expression -> Expression AND Expression','Expression',3,'p_expression_binop','syntax.py',354),
  ('Expression -> Expression OR Expression','Expression',3,'p_expression_binop','syntax.py',355),
  ('Expression -> ( Expression )','Expression',3,'p_expression_group','syntax.py',375),
  ('Expression -> identifier','Expression',1,'p_expression_identifier','syntax.py',380),
  ('Expression -> identifier [ Expression ]','Expression',4,'p_expression_index_access','syntax.py',392),
  ('Expression -> number','Expression',1,'p_expression_int','syntax.py',422),
  ('Expression -> argument','Expression',1,'p_expression_string','syntax.py',428),
  ('Expression -> TRUE','Expression',1,'p_expression_true','syntax.py',433),
  ('Expression -> FALSE','Expression',1,'p_expression_false','syntax.py',437),
  ('Expression -> NOT Expression','Expression',2,'p_expression_not','syntax.py',441),
  ('Expression -> LENGTH ( identifier )','Expression',4,'p_expression_length','syntax.py',446),
  ('Assignment -> identifier assign Expression','Assignment',3,'p_assignment','syntax.py',468),
  ('Block -> BEGIN Lines_Of_Code END','Block',3,'p_block','syntax.py',486),
  ('If_Statement -> If_Statement_Complete','If_Statement',1,'p_if_statement','syntax.py',496),
  ('If_Statement -> If_Statement_Incomplete','If_Statement',1,'p_if_statement','syntax.py',497),
  ('If_Statement_Complete -> IF Expression THEN Program_Line_No_Semi_Colon ELSE Program_Line_No_Semi_Colon','If_Statement_Complete',6,'p_if_statement_complete','syntax.py',503),
  ('If_Statement_Incomplete -> IF Expression THEN Program_Line_No_Semi_Colon','If_Statement_Incomplete',4,'p_if_statement_incomplete','syntax.py',522),
  ('For_Statement -> FOR identifier assign Expression TO Expression DO Program_Line_No_Semi_Colon','For_Statement',8,'p_for_statement','syntax.py',536),
  ('For_Statement -> FOR identifier assign Expression DOWNTO Expression DO Program_Line_No_Semi_Colon','For_Statement',8,'p_for_statement','syntax.py',537),
  ('While_Statement -> WHILE Expression DO Program_Line_No_Semi_Colon','While_Statement',4,'p_statement_while','syntax.py',595),
]
